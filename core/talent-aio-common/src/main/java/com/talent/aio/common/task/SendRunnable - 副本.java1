package com.talent.aio.common.task;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.talent.aio.common.Aio;
import com.talent.aio.common.ChannelContext;
import com.talent.aio.common.intf.Packet;
import com.talent.aio.common.threadpool.BatchQueueRunnable;
import com.talent.aio.common.utils.AioUtils;

/**
 * 
 * @author 谭耀武
 * @date 2012-08-09
 * 
 */
public class SendRunnable<Ext, P extends Packet, R> extends BatchQueueRunnable<P>
{

	private static final Logger log = LoggerFactory.getLogger(SendRunnable.class);

	/**
	 * @param args
	 */
	public static void main(String[] args)
	{
	}

	private ChannelContext<Ext, P, R> channelContext = null;

	/**
	 * 
	 * @param socketChannelId
	 */
	public SendRunnable(ChannelContext<Ext, P, R> channelContext, Executor executor)
	{
		super(executor);
		this.channelContext = channelContext;
		super.setRunnableName(SendRunnable.class.getSimpleName() + " [" + channelContext.getId() + "]");
	}

	/**
	 * 添加要处理的消息
	 * 
	 * @param packet
	 */
	public void addMsg(P packet)
	{
		getMsgQueue().add(packet);

	}

	/**
	 * 清空消息队列
	 */
	public void clearMsgQueue()
	{
		getMsgQueue().clear();
	}

	public void sendPackets(List<P> packets) throws IOException
	{
		if (packets == null || packets.size() == 0)
		{
			log.error("Packets is null，please check synchronize");
			return;
		}

		for (P packet : packets)
		{
			
			sendPacket(packet);
		}

	}

	public void sendPacket(P packet) throws IOException
	{
		if (packet == null)
		{
			log.error("Packet is null，please check synchronize");
			return;
		}

		if (!AioUtils.checkBeforeIO(channelContext))
		{
			return;
		}

		ByteBuffer byteBuffer = channelContext.getGroupContext().getAioHandler().encode(packet, channelContext);
		byteBuffer.flip();

		AsynchronousSocketChannel asynchronousSocketChannel = channelContext.getAsynchronousSocketChannel();
		Future<Integer> future = asynchronousSocketChannel.write(byteBuffer);
		Integer result = null;
		try
		{
			result = future.get();
		} catch (InterruptedException e)
		{
			log.error(e.toString(), e);
		} catch (ExecutionException e)
		{
			log.error(e.toString(), e);
		}

		if (result != null)
		{
			log.debug("数据写完成:{}", result);
			if (result > 0)
			{
				channelContext.getGroupContext().getGroupStat().getSentPacket().incrementAndGet();
			} else if (result == 0)
			{
				log.error("发送长度为{}", result);
				Aio.close(channelContext, "写数据返回:" + result);
			} else if (result < 0)
			{
				Aio.close(channelContext, "写数据返回:" + result);
			}
		} else
		{
			Aio.close(channelContext, "写不了数据");
		}
	}

	public void setChannelContext(ChannelContext<Ext, P, R> channelContext)
	{
		this.channelContext = channelContext;
	}

	@Override
	public void runBatch(List<P> t)
	{
		try
		{
			sendPackets(t);
		} catch (IOException e)
		{
			Aio.close(channelContext, e, "发送消息包发生IO异常");
		}
	}

	@Override
	public String toString()
	{
		StringBuilder builder = new StringBuilder();
		builder.append(this.getClass().getSimpleName()).append(":");
		builder.append(channelContext.toString());
		return builder.toString();
	}
}
