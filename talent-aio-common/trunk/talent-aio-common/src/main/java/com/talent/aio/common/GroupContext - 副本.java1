/**
 * **************************************************************************
 *
 * @说明: 
 * @项目名称: talent-aio-server
 *
 * @author: tanyaowu 
 * @创建时间: 2016年11月16日 上午10:06:33
 *
 * **************************************************************************
 */
package com.talent.aio.common.config;

import java.nio.ByteOrder;
import java.util.concurrent.Semaphore;
import java.util.concurrent.SynchronousQueue;

import com.talent.aio.common.intf.AioHandler;
import com.talent.aio.common.intf.Packet;
import com.talent.aio.common.maintain.Groups;
import com.talent.aio.common.maintain.Remotes;
import com.talent.aio.common.maintain.Users;
import com.talent.aio.common.threadpool.DefaultThreadFactory;
import com.talent.aio.common.threadpool.SynThreadPoolExecutor;
import com.talent.aio.common.threadpool.intf.SynRunnableIntf;

/**
 * 
 * @author tanyaowu 
 * @创建时间 2016年11月16日 上午10:06:33
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2016年11月16日 | tanyaowu | 新建类
 *
 */
public class GroupContext<Ext, P extends Packet, R>
{
	/**
	 * 同时接受请求的并发数
	 */
	private int acceptConcurrentCount = 100;
	/**
	 * 同时关闭连接的并发数
	 */
	private int closeConcurrentCount = 100;
	/**
	 * 同时读的并发数
	 */
	private int readConcurrentCount = 100;

	private Semaphore acceptSemaphore = new Semaphore(acceptConcurrentCount);
	private Semaphore closeSemaphore = new Semaphore(closeConcurrentCount);
	private Semaphore readSemaphore = new Semaphore(readConcurrentCount);

	public static final int corePoolSize = Runtime.getRuntime().availableProcessors() * 1;

	public static final int maximumPoolSize = corePoolSize * 4;

	public static final long keepAliveTime = 90L;

	private AioHandler<Ext, P, R> aioHandler;

	private ByteOrder byteOrder = ByteOrder.BIG_ENDIAN;
	/**
	 * 解码线程池
	 */
	private SynThreadPoolExecutor<SynRunnableIntf> decodeExecutor = null;

	/**
	 * 高优先级的业务处理线程池
	 */
	private SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorHighPrior = null;
	/**
	 * 低优先级的业务处理线程池
	 */
	private SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorLowPrior = null;

	/**
	 * 高优先级的消息发送线程池
	 */
	private SynThreadPoolExecutor<SynRunnableIntf> sendExecutorHighPrior = null;
	/**
	 * 低优先级的消息发送线程池
	 */
	private SynThreadPoolExecutor<SynRunnableIntf> sendExecutorLowPrior = null;

	private Remotes<Ext, P, R> remotes = new Remotes<>();
	private Groups<Ext, P, R> groups = new Groups<>();
	private Users<Ext, P, R> users = new Users<>();

	protected GroupContext()
	{
	}

	/**
	 * @param ip
	 * @param port
	 * @param aioHandler
	 *
	 * @author: tanyaowu
	 * @创建时间:　2016年11月16日 上午10:21:58
	 * 
	 */
	public GroupContext(AioHandler<Ext, P, R> aioHandler)
	{
		super();
		this.aioHandler = aioHandler;

		SynchronousQueue<Runnable> decodePoolQueue = new SynchronousQueue<Runnable>();
		decodeExecutor = new SynThreadPoolExecutor<SynRunnableIntf>(corePoolSize, maximumPoolSize, keepAliveTime, decodePoolQueue, "t-aio-decode");
		decodeExecutor.prestartAllCoreThreads();

		SynchronousQueue<Runnable> handlerPoolQueueHighPrior = new SynchronousQueue<Runnable>();
		handlerExecutorHighPrior = new SynThreadPoolExecutor<SynRunnableIntf>(corePoolSize, maximumPoolSize, keepAliveTime, handlerPoolQueueHighPrior,
				DefaultThreadFactory.getInstance("t-aio-handler-high-prior", Thread.MAX_PRIORITY), "t-aio-handler-high-prior");
		handlerExecutorHighPrior.prestartAllCoreThreads();

		SynchronousQueue<Runnable> handlerPoolQueueLowPrior = new SynchronousQueue<Runnable>();
		handlerExecutorLowPrior = new SynThreadPoolExecutor<SynRunnableIntf>(corePoolSize, maximumPoolSize, keepAliveTime, handlerPoolQueueLowPrior,
				"t-aio-handler-low-prior");
		handlerExecutorLowPrior.prestartAllCoreThreads();

		SynchronousQueue<Runnable> sendPoolQueueHighPrior = new SynchronousQueue<Runnable>();
		sendExecutorHighPrior = new SynThreadPoolExecutor<SynRunnableIntf>(corePoolSize, maximumPoolSize, keepAliveTime, sendPoolQueueHighPrior,
				DefaultThreadFactory.getInstance("t-aio-send-high-prior", Thread.MAX_PRIORITY), "t-aio-send-high-prior");
		sendExecutorHighPrior.prestartAllCoreThreads();

		SynchronousQueue<Runnable> sendPoolQueueLowPrior = new SynchronousQueue<Runnable>();
		sendExecutorLowPrior = new SynThreadPoolExecutor<SynRunnableIntf>(corePoolSize, maximumPoolSize, keepAliveTime, sendPoolQueueLowPrior,
				"t-aio-send-low-prior");
		sendExecutorLowPrior.prestartAllCoreThreads();

	}

	/**
	 * @param ip
	 * @param port
	 * @param aioHandler
	 * @param decodeExecutor
	 * @param handlerExecutorHighPrior
	 * @param handlerExecutorLowPrior
	 * @param sendExecutorHighPrior
	 * @param sendExecutorLowPrior
	 *
	 * @author: tanyaowu
	 * @创建时间:　2016年11月16日 上午10:23:47
	 * 
	 */
	public GroupContext(AioHandler<Ext, P, R> aioHandler, SynThreadPoolExecutor<SynRunnableIntf> decodeExecutor, SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorHighPrior,
			SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorLowPrior, SynThreadPoolExecutor<SynRunnableIntf> sendExecutorHighPrior,
			SynThreadPoolExecutor<SynRunnableIntf> sendExecutorLowPrior)
	{
		super();
		this.aioHandler = aioHandler;
		this.decodeExecutor = decodeExecutor;
		this.handlerExecutorHighPrior = handlerExecutorHighPrior;
		this.handlerExecutorLowPrior = handlerExecutorLowPrior;
		this.sendExecutorHighPrior = sendExecutorHighPrior;
		this.sendExecutorLowPrior = sendExecutorLowPrior;
	}

	/**
	 * @param args
	 *
	 * @author: tanyaowu
	 * @创建时间:　2016年11月16日 上午10:06:33
	 * 
	 */
	public static void main(String[] args)
	{

	}

	/**
	 * @return the aioHandler
	 */
	public AioHandler<Ext, P, R> getAioHandler()
	{
		return aioHandler;
	}

	/**
	 * @param aioHandler the aioHandler to set
	 */
	public void setAioHandler(AioHandler<Ext, P, R> aioHandler)
	{
		this.aioHandler = aioHandler;
	}

	/**
	 * @return the decodeExecutor
	 */
	public SynThreadPoolExecutor<SynRunnableIntf> getDecodeExecutor()
	{
		return decodeExecutor;
	}

	/**
	 * @param decodeExecutor the decodeExecutor to set
	 */
	public void setDecodeExecutor(SynThreadPoolExecutor<SynRunnableIntf> decodeExecutor)
	{
		this.decodeExecutor = decodeExecutor;
	}

	/**
	 * @return the handlerExecutorHighPrior
	 */
	public SynThreadPoolExecutor<SynRunnableIntf> getHandlerExecutorHighPrior()
	{
		return handlerExecutorHighPrior;
	}

	/**
	 * @param handlerExecutorHighPrior the handlerExecutorHighPrior to set
	 */
	public void setHandlerExecutorHighPrior(SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorHighPrior)
	{
		this.handlerExecutorHighPrior = handlerExecutorHighPrior;
	}

	/**
	 * @return the handlerExecutorLowPrior
	 */
	public SynThreadPoolExecutor<SynRunnableIntf> getHandlerExecutorLowPrior()
	{
		return handlerExecutorLowPrior;
	}

	/**
	 * @param handlerExecutorLowPrior the handlerExecutorLowPrior to set
	 */
	public void setHandlerExecutorLowPrior(SynThreadPoolExecutor<SynRunnableIntf> handlerExecutorLowPrior)
	{
		this.handlerExecutorLowPrior = handlerExecutorLowPrior;
	}

	/**
	 * @return the sendExecutorHighPrior
	 */
	public SynThreadPoolExecutor<SynRunnableIntf> getSendExecutorHighPrior()
	{
		return sendExecutorHighPrior;
	}

	/**
	 * @param sendExecutorHighPrior the sendExecutorHighPrior to set
	 */
	public void setSendExecutorHighPrior(SynThreadPoolExecutor<SynRunnableIntf> sendExecutorHighPrior)
	{
		this.sendExecutorHighPrior = sendExecutorHighPrior;
	}

	/**
	 * @return the sendExecutorLowPrior
	 */
	public SynThreadPoolExecutor<SynRunnableIntf> getSendExecutorLowPrior()
	{
		return sendExecutorLowPrior;
	}

	/**
	 * @param sendExecutorLowPrior the sendExecutorLowPrior to set
	 */
	public void setSendExecutorLowPrior(SynThreadPoolExecutor<SynRunnableIntf> sendExecutorLowPrior)
	{
		this.sendExecutorLowPrior = sendExecutorLowPrior;
	}

	/**
	 * @return the byteOrder
	 */
	public ByteOrder getByteOrder()
	{
		return byteOrder;
	}

	/**
	 * @param byteOrder the byteOrder to set
	 */
	public void setByteOrder(ByteOrder byteOrder)
	{
		this.byteOrder = byteOrder;
	}

	/**
	 * @return the remotes
	 */
	public Remotes<Ext, P, R> getRemotes()
	{
		return remotes;
	}

	/**
	 * @param remotes the remotes to set
	 */
	public void setRemotes(Remotes<Ext, P, R> remotes)
	{
		this.remotes = remotes;
	}

	/**
	 * @return the groups
	 */
	public Groups<Ext, P, R> getGroups()
	{
		return groups;
	}

	/**
	 * @param groups the groups to set
	 */
	public void setGroups(Groups<Ext, P, R> groups)
	{
		this.groups = groups;
	}

	/**
	 * @return the users
	 */
	public Users<Ext, P, R> getUsers()
	{
		return users;
	}

	/**
	 * @param users the users to set
	 */
	public void setUsers(Users<Ext, P, R> users)
	{
		this.users = users;
	}

	/**
	 * @return the acceptConcurrentCount
	 */
	public int getAcceptConcurrentCount()
	{
		return acceptConcurrentCount;
	}

	/**
	 * @param acceptConcurrentCount the acceptConcurrentCount to set
	 */
	public void setAcceptConcurrentCount(int acceptConcurrentCount)
	{
		this.acceptConcurrentCount = acceptConcurrentCount;
	}

	/**
	 * @return the closeConcurrentCount
	 */
	public int getCloseConcurrentCount()
	{
		return closeConcurrentCount;
	}

	/**
	 * @param closeConcurrentCount the closeConcurrentCount to set
	 */
	public void setCloseConcurrentCount(int closeConcurrentCount)
	{
		this.closeConcurrentCount = closeConcurrentCount;
	}

	/**
	 * @return the readConcurrentCount
	 */
	public int getReadConcurrentCount()
	{
		return readConcurrentCount;
	}

	/**
	 * @param readConcurrentCount the readConcurrentCount to set
	 */
	public void setReadConcurrentCount(int readConcurrentCount)
	{
		this.readConcurrentCount = readConcurrentCount;
	}

	/**
	 * @return the acceptSemaphore
	 */
	public Semaphore getAcceptSemaphore()
	{
		return acceptSemaphore;
	}

	/**
	 * @param acceptSemaphore the acceptSemaphore to set
	 */
	public void setAcceptSemaphore(Semaphore acceptSemaphore)
	{
		this.acceptSemaphore = acceptSemaphore;
	}

	/**
	 * @return the closeSemaphore
	 */
	public Semaphore getCloseSemaphore()
	{
		return closeSemaphore;
	}

	/**
	 * @param closeSemaphore the closeSemaphore to set
	 */
	public void setCloseSemaphore(Semaphore closeSemaphore)
	{
		this.closeSemaphore = closeSemaphore;
	}

	/**
	 * @return the readSemaphore
	 */
	public Semaphore getReadSemaphore()
	{
		return readSemaphore;
	}

	/**
	 * @param readSemaphore the readSemaphore to set
	 */
	public void setReadSemaphore(Semaphore readSemaphore)
	{
		this.readSemaphore = readSemaphore;
	}

}
