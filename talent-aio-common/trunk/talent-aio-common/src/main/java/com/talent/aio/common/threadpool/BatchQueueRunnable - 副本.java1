/**
 * 
 */
package com.talent.aio.common.threadpool;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Executor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.talent.aio.common.utils.SystemTimer;

/**
 * The Class BatchQueueRunnable.
 *
 * @param <T> the generic type
 * @filename:  com.talent.threadpool.BatchQueueRunnable
 * @copyright:   Copyright (c)2010
 * @company:     talent
 * @author:      谭耀武
 * @version:     1.0
 * @create time: 2013年4月30日 上午9:58:17
 * @record <table cellPadding="3" cellSpacing="0" style="width:600px">
 * <thead style="font-weight:bold;background-color:#e3e197">
 * 	<tr>   <td>date</td>	<td>author</td>		<td>version</td>	<td>description</td></tr>
 * </thead>
 * <tbody style="background-color:#ffffeb">
 * 	<tr><td>2015年4月30日</td>	<td>谭耀武</td>	<td>1.0</td>	<td>create</td></tr>
 * </tbody>
 * </table>
 */
public abstract class BatchQueueRunnable<T> extends AbstractQueueRunnable<T>
{

	/** The log. */
	private static Logger log = LoggerFactory.getLogger(BatchQueueRunnable.class);

	/** The Constant MAX_BATCH_COUNT. */
	private static final int MAX_BATCH_COUNT = 100;

	/**
	 * Instantiates a new batch queue runnable.
	 */
	public BatchQueueRunnable(Executor executor)
	{
		super(executor);
	}

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args)
	{

	}

	/** 
	 * @see com.talent.aio.common.threadpool.intf.SynRunnableIntf#runTask()
	 * 
	 * @重写人: tanyaowu
	 * @重写时间: 2016年11月15日 上午9:07:01
	 * 
	 */
	@Override
	public void runTask()
	{
		T packet = null;
		ConcurrentLinkedQueue<T> queue = getMsgQueue();
		long starttime;
		long endtime;
		long starttimeAll = SystemTimer.currentTimeMillis();
		int size;
		int allsize = 0;
		while ((size = queue.size()) > 0)
		{
			//			if (waitingRunCount() > 0)
			//			{
			//				break;
			//			}

			if (size > maxBatchCount())
			{
				size = maxBatchCount();
			}

			starttime = SystemTimer.currentTimeMillis();
			//			T[] packets = (T[]) Array.newInstance(T.class, size);  
			List<T> packets = new ArrayList<>(size);
			for (int i = 0; i < size; i++)
			{
				if ((packet = queue.poll()) != null)
				{
					packets.add(packet);// = packet;
				} else
				{
					log.error("queue.poll is null, {}", this);
				}
			}
			endtime = SystemTimer.currentTimeMillis();
			long timecost = endtime - starttime;
			if (timecost > 500L)
			{
				log.warn("内部循环耗时:{}ms, size:{}, {}", timecost, size, this);
			}

			starttime = SystemTimer.currentTimeMillis();
			runBatch(packets);
			allsize += size;
			endtime = SystemTimer.currentTimeMillis();
			timecost = endtime - starttime;
			if (timecost > 500L)
			{
				log.warn("本次处理{}个消息，耗时:{}ms, {}", size, timecost, this);
			}
		}
		long endtimeAll = SystemTimer.currentTimeMillis();

		long timecostAl = endtimeAll - starttimeAll;

		if (timecostAl > 500L)
		{
			log.warn("一共处理{}个消息，耗时:{}ms, {}", allsize, timecostAl, this);
		}
	}

	/**
	 * Run batch.
	 *
	 * @param t the t
	 */
	public abstract void runBatch(List<T> t);

	/**
	 * Max batch count.
	 *
	 * @return the int
	 */
	public int maxBatchCount()
	{
		return MAX_BATCH_COUNT;
	}
}
